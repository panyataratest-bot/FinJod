<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>
  <title>FIN-ED ¬∑ User</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&display=swap" rel="stylesheet">
  <style>
    *{ box-sizing:border-box }
    :root{
      --bg:#1e1e1e; --bg2:#242424; --panel:#2a2a2a; --line:#3a3a3a; --muted:#bfbfbf; --text:#f1f1f1;
      --primary:#ff2e80; --primary-2:#e91e63; --blue:#6c8cff; --green:#00c896; --danger:#ff4d4f; --warning:#ffb020; --cyan:#2dd4bf;
      --space: clamp(.9rem, 2.6vw, 1.25rem);
    }
    html,body{ height:100% }
    body{
      margin:0; padding:var(--space);
      padding-bottom:calc(var(--space) + env(safe-area-inset-bottom,0px));
      font-family:'Kanit',sans-serif; background:var(--bg); color:var(--text)
    }
    h1{ text-align:center; font-size:clamp(1.3rem,4.6vw,2rem); color:var(--primary); margin:0 0 1rem }
    .container{ width:min(1140px,100%); margin:auto; background:var(--panel);
      padding:clamp(.9rem,2.8vw,1.6rem); border-radius:24px; box-shadow:0 12px 30px rgba(0,0,0,.5) }

    .card{ background:var(--bg2); border:1px solid var(--line); border-radius:18px; padding:clamp(.9rem,2.6vw,1.4rem);
      margin-bottom:var(--space); overflow:hidden; }
    .row{ display:flex; flex-wrap:wrap; gap:clamp(.8rem,2vw,1rem); margin-bottom:clamp(.6rem,2vw,1rem); align-items:flex-start }
    .col{ flex:1 1 46%; display:flex; flex-direction:column; gap:.45rem; min-width:220px }

    label{ color:var(--muted); font-size:.95rem }
    input, select, button, textarea{ padding:1rem 1.1rem; font-size:16px; border-radius:14px; border:1px solid #555; background:#1e1e1e; color:#fff; min-height:46px }
    textarea{ min-height:90px; resize:vertical }
    input[type=number]{ text-align:right; -moz-appearance:textfield }
    input[type=number]::-webkit-outer-spin-button,input[type=number]::-webkit-inner-spin-button{ -webkit-appearance:none; margin:0; }
    button{ background:var(--primary); border:none; font-weight:700; cursor:pointer; transition:background .2s; padding:.9rem 1.15rem; min-height:46px; }
    @media (hover:hover) and (pointer:fine){ button:hover{ background:var(--primary-2) } }
    button:disabled{ opacity:.65; cursor:not-allowed }
    .btn-ghost{ background:#3a3a3a } .btn-green{ background:var(--green) } .btn-blue{ background:var(--blue) } .btn-danger{ background:var(--danger) } .btn-cyan{ background:var(--cyan); color:#07302b }

    .tabs{ display:flex; gap:.6rem; flex-wrap:wrap; margin-bottom:var(--space) }
    .tabbtn{ padding:.85rem 1.15rem; border-radius:14px; border:1px solid #444; background:#1f1f1f; color:#ddd; cursor:pointer; min-height:46px }
    .tabbtn.active{ background:var(--primary); border-color:var(--primary); color:#fff; font-weight:700 }
    .section{ display:none } .section.active{ display:block }

    .chip{ display:inline-flex; align-items:center; gap:.4rem; padding:.4rem .7rem; border:1px solid var(--line); border-radius:999px; font-size:.92rem; color:#ddd }
    .muted{ color:var(--muted) } .right{ text-align:right }

    .chart-wrap{ height:260px; width:100% } .chart-wrap canvas{ width:100% !important; height:100% !important; display:block }
    @media(max-width:980px){ .chart-wrap{ height:220px } }
    @media(max-width:768px){ .chart-wrap{ height:200px } }

    .table-viewport{ max-height:420px; overflow:auto; border-radius:12px; border:1px solid var(--line); -webkit-overflow-scrolling:touch; }
    table{ width:100%; border-collapse:collapse; table-layout:fixed; font-size:.98rem }
    th,td{ border-bottom:1px solid var(--line); padding:.85rem .55rem; overflow:hidden; text-overflow:ellipsis; white-space:nowrap }
    th{ color:var(--muted); font-weight:600; text-align:left; position:sticky; top:0; background:var(--bg2); z-index:1 }
    .table-viewport tbody tr:hover{ background:#2f2f2f }

    .kpi{ display:grid; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); gap:clamp(.8rem,2vw,1rem); margin-bottom:var(--space) }
    .kpi .card{ display:flex; flex-direction:column; gap:.4rem; min-height:92px }

    /* toast + overlay */
    #toast{ position:fixed; left:50%; bottom:calc(22px + env(safe-area-inset-bottom,0px)); transform:translateX(-50%); background:#333; color:#fff; padding:.8rem 1.2rem; border-radius:12px; opacity:0; transition:.35s; pointer-events:none; z-index:120 }
    #overlay{ position:fixed; inset:0; background:rgba(0,0,0,.45); display:none; align-items:center; justify-content:center; z-index:110 }
    #overlay.show{ display:flex }
    .spinner{ width:62px; height:62px; border:6px solid rgba(255,255,255,.35); border-top-color:#fff; border-radius:50%; animation:spin 1s linear infinite }
    @keyframes spin{ to{ transform:rotate(360deg) } }
    .hide{ display:none }

    .range-inline{ display:grid; grid-template-columns: 180px auto 180px auto auto auto; align-items:end; gap:.6rem; }
    .range-inline .to-sep{ color:var(--muted); align-self:center; padding:0 .25rem }
    .range-inline input[type="date"]{ min-width:170px }

    @media(max-width:860px){
      .col{ flex:1 1 100% }
      .range-inline{ grid-template-columns:1fr 1fr; grid-auto-rows:auto }
      .range-inline .to-sep{ display:none }
      .range-inline input[type="date"]{ min-width:0; grid-column:1 / -1 }
      .range-inline .segbtn, .range-inline .btn-blue{ width:100% }
      .table-viewport{ max-height:none; overflow-y:visible; overflow-x:auto }
      table{ min-width:560px; table-layout:auto; font-size:.95rem }
      th{ position:static }
      td:nth-child(3),td:nth-child(5){ white-space:normal }
      td:nth-child(4){ white-space:nowrap }
    }

    .bar-track{ height:10px; background:#3a3a3a; border-radius:999px; overflow:hidden }
    .bar-fill{ height:100%; width:0% }

    /* modal a11y */
    #modal.hide{ display:none }
    #modal{ position:fixed; inset:0; display:flex; align-items:center; justify-content:center; background:rgba(0,0,0,.5); z-index:130 }
  </style>
</head>
<body>
  <div class="container">
    <h1>FIN-ED ¬∑ User</h1>

    <!-- Login -->
    <div id="loginBox" class="card">
      <div class="row">
        <div class="col">
          <label for="inpUser">User ID</label>
          <input id="inpUser" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" autocomplete="username">
        </div>
        <div class="col">
          <label for="inpPin">PIN</label>
          <input id="inpPin" type="password" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" autocomplete="current-password">
        </div>
      </div>
      <div class="row" style="gap:.8rem">
        <button id="btnLogin" class="btn-green">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö üöÄ</button>
        <span id="loginMsg" class="muted" style="align-self:center"></span>
      </div>
      <div class="muted" style="margin-top:.35rem">* ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö User ID ‡πÅ‡∏•‡∏∞ PIN</div>
    </div>

    <!-- App -->
    <div id="app" class="hide">
      <div class="row" style="align-items:center; margin-top:.25rem">
        <div class="muted">üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ <b id="who">‚Äî</b></div>
        <div style="margin-left:auto; display:flex; gap:.6rem; flex-wrap:wrap">
          <button id="btnRefresh" class="btn-blue">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä üîÑ</button>
          <button id="btnLogout" class="btn-ghost">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö üö™</button>
        </div>
      </div>

      <!-- Tabs -->
      <div class="tabs" role="tablist" aria-label="‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å">
        <button class="tabbtn active" role="tab" aria-selected="true"  aria-controls="tab-add"  data-tab="add">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚úçÔ∏è</button>
        <button class="tabbtn"        role="tab" aria-selected="false" aria-controls="tab-dash" data-tab="dash">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î üìä</button>
        <button class="tabbtn"        role="tab" aria-selected="false" aria-controls="tab-list" data-tab="list">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ üìÉ</button>
        <button class="tabbtn"        role="tab" aria-selected="false" aria-controls="tab-debt" data-tab="debt">‡∏´‡∏ô‡∏µ‡πâ üí≥</button>
      </div>

      <!-- ADD -->
      <section id="tab-add" class="section active card">
        <div class="row">
          <div class="col">
            <label for="txDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà üìÖ</label>
            <input id="txDate" type="date">
          </div>
          <div class="col">
            <label for="txType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
            <select id="txType">
              <option value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
              <option value="expense" selected>‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
              <option value="saving">‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô</option>
              <option value="debt_pay">‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ</option>
              <option value="debt_borrow">‡∏Å‡∏π‡πâ‡∏´‡∏ô‡∏µ‡πâ</option>
            </select>
          </div>
          <div class="col" id="colCat">
            <label for="txCat">‡∏´‡∏°‡∏ß‡∏î</label>
            <select id="txCat"></select>
          </div>
          <div class="col" id="colDebt" style="display:none">
            <label for="txDebt">‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</label>
            <select id="txDebt"></select>
          </div>
          <div class="col">
            <label for="txAmount">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
            <input id="txAmount" type="number" step="0.01" placeholder="0.00" inputmode="decimal">
          </div>
        </div>
        <div class="row">
          <div class="col" style="flex:1 1 100%">
            <label for="txNote">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
            <input id="txNote" placeholder="‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)">
          </div>
        </div>
        <div class="row">
          <button id="btnSave" class="btn-green">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚úÖ</button>
          <label style="display:flex; align-items:center; gap:.5rem">
            <input id="keepSwitch" type="checkbox" style="width:18px; height:18px"> <span class="muted">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ß‡πâ</span>
          </label>
          <span id="txMsg" class="muted" style="margin-left:auto"></span>
        </div>
      </section>

      <!-- DASHBOARD -->
      <section id="tab-dash" class="section card">
        <div class="row">
          <div class="col" style="min-width:220px">
            <label>‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
            <div class="range-inline">
              <input id="fFrom" type="date">
              <span class="to-sep">‡∏ñ‡∏∂‡∏á</span>
              <input id="fTo" type="date">
              <button class="tabbtn segbtn" id="btnToday">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</button>
              <button class="tabbtn segbtn" id="btnMonth">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</button>
              <button class="btn-blue" id="btnRangeRefresh">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
            </div>
            <div style="margin-top:.5rem"><span class="chip">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π: <span id="rangeBadge">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</span></span></div>
          </div>
        </div>

        <!-- KPI -->
        <div class="kpi" id="kpiWrap">
          <div class="card"><div class="muted">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°</div><div id="sumIncome" style="font-size:1.6rem;font-weight:700">‚Äî</div></div>
          <div class="card"><div class="muted">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°</div><div id="sumExpense" style="font-size:1.6rem;font-weight:700">‚Äî</div></div>
          <div class="card"><div class="muted">‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°</div><div id="sumDebtPay" style="font-size:1.6rem;font-weight:700">‚Äî</div></div>
          <div class="card"><div class="muted">‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ù‡∏≤‡∏Å‚àí‡∏ñ‡∏≠‡∏ô)</div><div id="sumSaving" style="font-size:1.6rem;font-weight:700">‚Äî</div></div>
          <div class="card"><div class="muted">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</div><div id="sumNet" style="font-size:1.6rem;font-weight:700">‚Äî</div></div>
        </div>

        <!-- Budget/Goal -->
        <div class="card" style="margin-bottom:1rem">
          <div class="row">
            <div class="col">
              <div class="muted">‡∏á‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)</div>
              <input id="inpBudget" type="number" step="0.01" placeholder="‡πÄ‡∏ä‡πà‡∏ô 15000">
              <div class="bar-track"><div id="budgetBar" class="bar-fill" style="background:linear-gradient(90deg,#6c8cff,#ffb020,#ff4d4f)"></div></div>
              <div class="muted" id="budgetHint" style="margin-top:.3rem">‚Äî</div>
            </div>
            <div class="col">
              <div class="muted">‡πÄ‡∏õ‡πâ‡∏≤‡∏≠‡∏≠‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)</div>
              <input id="inpSavingGoal" type="number" step="0.01" placeholder="‡πÄ‡∏ä‡πà‡∏ô 3000">
              <div class="bar-track"><div id="savingBar" class="bar-fill" style="background:linear-gradient(90deg,#2dd4bf,#00c896)"></div></div>
              <div class="muted" id="savingHint" style="margin-top:.3rem">‚Äî</div>
            </div>
          </div>
          <div class="row"><button id="btnSaveBudget" class="btn-cyan">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏ö/‡πÄ‡∏õ‡πâ‡∏≤ üíæ</button></div>
          <div class="muted">* ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå __BUDGET_OVERALL__ ‡πÅ‡∏•‡∏∞ __SAVING_GOAL__ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
        </div>

        <div class="row">
          <div class="card" style="flex:1 1 48%">
            <div class="muted" style="margin-bottom:.5rem">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î</div>
            <div id="noDataExp" class="muted hide">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ</div>
            <div class="chart-wrap"><canvas id="chartExp"></canvas></div>
          </div>
          <div class="card" style="flex:1 1 48%">
            <div class="muted" style="margin-bottom:.5rem">‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô & ‡∏™‡∏∞‡∏™‡∏°)</div>
            <div id="noDataFlow" class="muted hide">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ</div>
            <div class="chart-wrap"><canvas id="chartFlow"></canvas></div>
          </div>
        </div>

        <div class="row">
          <div class="card" style="flex:1 1 100%">
            <div class="muted" style="margin-bottom:.5rem">‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏™‡∏∞‡∏™‡∏° (‡∏ù‡∏≤‡∏Å ‚àí ‡∏ñ‡∏≠‡∏ô)</div>
            <div id="noDataSav" class="muted hide">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ</div>
            <div class="chart-wrap"><canvas id="chartSavCum"></canvas></div>
          </div>
        </div>

        <!-- Debt (‡∏™‡∏£‡∏∏‡∏õ/‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥) -->
        <div class="row" id="debtCards">
          <div class="card" style="flex:1 1 100%">
            <div style="display:flex; gap:.6rem; align-items:center; margin-bottom:.5rem; flex-wrap:wrap">
              <div class="muted">‡∏´‡∏ô‡∏µ‡πâ</div>
              <div style="margin-left:auto; display:flex; gap:.4rem; flex-wrap:wrap">
                <select id="debtViewMode" class="tabbtn" style="padding:.55rem .8rem; min-height:auto">
                  <option value="snapshot">‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</option>
                  <option value="history">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ (‡πÄ‡∏™‡πâ‡∏ô: ‡∏î‡∏≠‡∏Å/‡∏ï‡πâ‡∏ô)</option>
                </select>
                <select id="debtFilter" class="tabbtn" style="padding:.55rem .8rem; min-height:auto">
                  <option value="">‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ: ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                </select>
              </div>
            </div>

            <div id="noDebt" class="muted hide">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏µ‡πâ</div>
            <div class="chart-wrap"><canvas id="chartDebt"></canvas></div>
            <div id="debtForecast" class="muted" style="margin-top:.4rem; display:none">‚Äî</div>
          </div>
        </div>
      </section>

      <!-- LIST -->
      <section id="tab-list" class="section card">
        <div class="muted" style="margin-bottom:.5rem">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î)</div>
        <div class="table-viewport">
          <table>
            <thead><tr>
              <th style="width:110px">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th style="width:160px">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
              <th>‡∏´‡∏°‡∏ß‡∏î</th>
              <th class="right" style="width:130px">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
              <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
              <th style="width:96px">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr></thead>
            <tbody id="tblBody"></tbody>
          </table>
        </div>
        <div id="emptyList" class="muted" style="margin-top:.5rem; display:none">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
      </section>

      <!-- DEBT Registry -->
      <section id="tab-debt" class="section card">
        <div class="row">
          <div class="col">
            <label for="debtName">‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</label>
            <input id="debtName" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ï‡∏£ A / ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô / ‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå">
          </div>
          <div class="col">
            <label for="debtAPR">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ)</label>
            <input id="debtAPR" type="number" step="0.01" placeholder="‡πÄ‡∏ä‡πà‡∏ô 18">
          </div>
          <div class="col">
            <label for="debtPrincipal">‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
            <input id="debtPrincipal" type="number" step="0.01" placeholder="‡πÄ‡∏ä‡πà‡∏ô 10000">
          </div>
          <div class="col">
            <label for="debtStart">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏î‡∏î‡∏≠‡∏Å</label>
            <input id="debtStart" type="date">
          </div>
        </div>
        <div class="row">
          <button id="btnDebtAdd" class="btn-blue">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</button>
        </div>

        <div class="row" style="margin-top:.25rem">
          <div class="muted">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
        </div>
        <div class="table-viewport">
          <table>
            <thead><tr>
              <th>‡∏ä‡∏∑‡πà‡∏≠</th>
              <th class="right" style="width:130px">‡∏î‡∏≠‡∏Å/‡∏õ‡∏µ (%)</th>
              <th class="right" style="width:160px">‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ö‡∏≤‡∏ó)</th>
              <th class="right" style="width:160px">‡∏î‡∏≠‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á (‡∏ö‡∏≤‡∏ó)</th>
              <th style="width:120px">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th style="width:160px">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr></thead>
            <tbody id="tblDebt"></tbody>
          </table>
        </div>
        <div id="emptyDebt" class="muted" style="margin-top:.5rem; display:none">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</div>
      </section>
    </div>
  </div>

  <div id="toast" aria-live="polite" role="status">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>
  <div id="overlay"><div class="spinner" aria-hidden="true"></div></div>

  <!-- Modal -->
  <div id="modal" class="hide" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
    <div id="modalCard" class="card" style="width:min(560px,96%);">
      <div id="modalTitle" style="font-weight:700;margin-bottom:.6rem">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</div>
      <div id="modalBody"></div>
      <div style="display:flex;gap:.6rem;justify-content:flex-end;margin-top:.8rem">
        <button id="btnModalCancel" class="btn-ghost">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        <button id="btnModalSave" class="btn-cyan">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
      </div>
    </div>
  </div>

<script>
/* ===== CONFIG ===== */
const API_URL = 'https://script.google.com/macros/s/AKfycbznJMWIaEVx9NQurW2PO38SUQPSRoYFzSmhZCjNUIDJEFRLv1JmDC2XsQCoBUIlAbm8Uw/exec';
const BUD_CAT_OVERALL   = '__BUDGET_OVERALL__';
const BUD_CAT_SAVE_GOAL = '__SAVING_GOAL__';

/* ===== STATE ===== */
let token = localStorage.getItem('fin_token') || '';
let displayName = localStorage.getItem('fin_name') || '';
let lastItems = [];
let withdrawIncomeIds = new Set(); // ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡∏≠‡∏ô‡∏≠‡∏≠‡∏°
let debtPayCatIds = new Set();     // ‡∏´‡∏°‡∏ß‡∏î "‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ"
let debts = [];                    // ‡∏à‡∏≤‡∏Å GAS: debts/list
let chartDebt=null, chartExp=null, chartFlow=null, chartSavCum=null;
let debtChartMode = 'snapshot';

/* ===== HELPERS ===== */
const $  = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));
const fmt = n => Number(n||0).toLocaleString('th-TH',{minimumFractionDigits:2, maximumFractionDigits:2});
const safe = v => (v==null ? '' : String(v));
const esc = (s='') => String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#39;');
const escs = v => esc(safe(v));
function toast(msg, ok=true){ const el=$('#toast'); el.textContent=msg; el.style.background=ok?'#00c896':'#d63031'; el.style.opacity='1'; setTimeout(()=>el.style.opacity='0',2600); }
let _overlayN = 0;
function showOverlay(on){ _overlayN += on ? 1 : -1; if (_overlayN<0) _overlayN=0; $('#overlay').classList.toggle('show', _overlayN>0); }
const toYMD = d=>`${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`;
const todayISO = ()=> toYMD(new Date());
const monthBoundsOf = d=>({ start: toYMD(new Date(d.getFullYear(), d.getMonth(), 1)), end: toYMD(new Date(d.getFullYear(), d.getMonth()+1, 0)) });
const yyyyMmOf = d=>`${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
const sum = (arr, pick) => arr.reduce((s,x)=> s+(pick(x)||0), 0);
const groupBy = (arr, key) => arr.reduce((a,x)=> ((a[key(x)] = a[key(x)]||[]).push(x),a),{});
const runningSum = (arr)=>{ let s=0; return arr.map(v=>(s+=v,s)); };
function destroyChart(c){ if (c){ try{ c.destroy(); }catch{} } }
function el(q){ const e=$(q); if(!e) throw new Error(`missing ${q}`); return e; }
function lockBtn(btn, fn){
  if (btn.__busy) return;
  btn.__busy = true; btn.disabled = true;
  Promise.resolve().then(fn).finally(()=>{ btn.__busy=false; btn.disabled=false; });
}

/* ===== AbortController: cancel pending fetch on logout ===== */
let _ctrl = new AbortController();
function resetController(){ try{_ctrl.abort()}catch{} _ctrl = new AbortController(); }

/* ===== fetch wrapper (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏õ‡∏¥‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πâ‡∏≤) ===== */
async function api(path, payload={}, useToken=true, withOverlay=true){
  const body = { path, payload };
  if (useToken && token) body.token = token;

  // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á overlay 250ms
  let overlayShown = false, timer = null;
  if (withOverlay){
    timer = setTimeout(()=>{ overlayShown = true; showOverlay(true); }, 250);
  }

  try{
    const res = await fetch(API_URL, {
      method:'POST',
      headers:{'Content-Type':'text/plain;charset=utf-8'},
      body: JSON.stringify(body),
      signal: _ctrl.signal
    });
    const text = await res.text();
    let j; try{ j = JSON.parse(text); }catch{ toast('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON', false); return { ok:false, error:'NON_JSON', raw:text }; }
    if (!j.ok && (j.error==='BAD_TOKEN' || j.error==='UNAUTHORIZED' || j.status===401)){
      localStorage.removeItem('fin_token'); token=''; ensureLoginUI(); toast('‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà', false);
    }
    return j;
  }catch(e){ 
    if (e?.name === 'AbortError') return { ok:false, error:'ABORTED' };
    toast(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${e?.message||e}`, false); 
    return { ok:false, error:'NETWORK_ERROR', message:String(e?.message||e) }; 
  }
  finally{ if (withOverlay){ clearTimeout(timer); if (overlayShown) showOverlay(false); } }
}

/* ===== LOGIN / LOGOUT / TABS ===== */
function ensureLoginUI(){
  if (token){
    $('#loginBox').classList.add('hide');
    $('#app').classList.remove('hide');
    $('#who').textContent = displayName || localStorage.getItem('fin_user') || '';
    $('#txDate').value = todayISO();
    Promise.all([loadCategoriesAll(), loadDebts(false)]).then(()=>{ populateTypeTargets(); });
    ensureRangeDefaults(); refreshDash(true,false);
  } else {
    $('#app').classList.add('hide'); $('#loginBox').classList.remove('hide'); $('#inpUser').focus();
  }
}
$('#btnLogin').addEventListener('click', ()=> lockBtn($('#btnLogin'), doLogin));
$('#inpPin').addEventListener('keydown', (e)=>{ if (e.key==='Enter') doLogin(); });
async function doLogin(){
  const user_id = $('#inpUser').value.trim(); const pin = $('#inpPin').value.trim();
  if (!user_id || !pin){ $('#loginMsg').textContent='‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞'; toast('‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞', false); return; }
  $('#loginMsg').textContent='‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‚Ä¶';
  const j = await api('auth/login', { user_id, pin }, false, true);
  if (!j.ok){
    const msg = (j.error==='USER_NOT_FOUND') ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : (j.error==='BAD_PIN') ? '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î' : (j.message||'‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    $('#loginMsg').textContent = msg; toast(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${msg}`, false); return;
  }
  token = j.token; displayName = j.display_name || user_id;
  localStorage.setItem('fin_token', token); localStorage.setItem('fin_user', user_id); localStorage.setItem('fin_name', displayName);
  $('#loginMsg').textContent = ''; toast('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö üòä'); ensureLoginUI();
}
$('#btnLogout').addEventListener('click', ()=>{
  resetController(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å request ‡∏Ñ‡πâ‡∏≤‡∏á
  localStorage.removeItem('fin_token'); localStorage.removeItem('fin_name'); localStorage.removeItem('fin_user');
  token=''; displayName=''; $('#inpUser').value=''; $('#inpPin').value=''; $('#loginMsg').textContent=''; ensureLoginUI();
});
function switchTab(name){
  $$('.tabbtn[role="tab"]').forEach(b=>{ const on=(b.dataset.tab===name); b.classList.toggle('active', on); b.setAttribute('aria-selected', on?'true':'false'); });
  $$('.section').forEach(s=> s.classList.toggle('active', s.id==='tab-'+name));
  if (name==='dash'){ ensureRangeDefaults(); refreshDash(true,false); }
  if (name==='list'){ refreshDash(true,false); }
  if (name==='debt'){ loadDebts(false); }
}
// ‡∏ú‡∏π‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÜ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° select ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏≤‡∏™ tabbtn)
$$('.tabbtn[role="tab"]').forEach(b=> b.addEventListener('click', ()=> switchTab(b.dataset.tab)));

/* ===== CATEGORIES ===== */
let cats = { income:[], expense:[], saving:[] };
function _isWithdrawIncomeName(name){ const s = String(name||''); return /‡∏ñ‡∏≠‡∏ô.*‡∏≠‡∏≠‡∏°|‡∏≠‡∏≠‡∏°.*‡∏ñ‡∏≠‡∏ô|‡∏ñ‡∏≠‡∏ô‡∏≠‡∏≠‡∏°|‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°|withdraw.*(save|saving)|saving.*withdraw/i.test(s); }
async function loadCategoriesAll(){
  for (const t of ['income','expense','saving']){
    const r = await api('categories/list', { type:t }, true, true);
    cats[t] = r.ok && Array.isArray(r.items) ? r.items : [];
  }
  withdrawIncomeIds = new Set((cats.income||[]).filter(c=> _isWithdrawIncomeName(c.name_th)).map(c=> String(c.category_id)));
  // ‡∏´‡∏°‡∏ß‡∏î "‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ" (‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢)
  debtPayCatIds = new Set((cats.expense||[]).filter(c => /‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ/.test(String(c.name_th||''))).map(c=> String(c.category_id)));
}
function populateCatSelect(){
  const t = $('#txType').value; const sel = $('#txCat'); sel.innerHTML='';
  (cats[t]||[]).forEach(c=>{ const o=document.createElement('option'); o.value=c.category_id; o.textContent=escs(c.name_th); sel.appendChild(o); });
}

/* ===== DEBTS ===== */
async function loadDebts(withOverlay=true){
  const r = await api('debts/list', {}, true, withOverlay);
  debts = r.ok && Array.isArray(r.items) ? r.items : [];
  renderDebtTable();
  populateDebtSelect();
  const sel = $('#debtFilter'); sel.innerHTML = `<option value="">‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ: ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>`;
  for (const d of debts){ const o=document.createElement('option'); o.value=d.debt_id; o.textContent=escs(d.lender_name||'‚Äî'); sel.appendChild(o); }
}
function populateDebtSelect(){
  const sel = $('#txDebt'); if (!sel) return;
  sel.innerHTML='';
  const active = (debts||[]).filter(d => String(d.is_active) !== 'false');
  if (!active.length){ const o=document.createElement('option'); o.value=''; o.textContent='(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ)'; sel.appendChild(o); return; }
  for (const d of active){ const o=document.createElement('option'); o.value=d.debt_id; o.textContent=`${escs(d.lender_name)} ‚Ä¢ ${Number(d.annual_rate||0)}%`; sel.appendChild(o); }
}
function renderDebtTable(){
  const tb = $('#tblDebt'); tb.innerHTML='';
  const list = debts.slice().sort((a,b)=> String(a.lender_name||'').localeCompare(String(b.lender_name||''),'th'));
  if (!list.length){ $('#emptyDebt').style.display='block'; return; }
  $('#emptyDebt').style.display='none';
  for (const d of list){
    const tr=document.createElement('tr');
    tr.innerHTML=`<td>${escs(d.lender_name||'')}</td>
      <td class="right">${fmt(Number(d.annual_rate||0))}</td>
      <td class="right">${fmt(Number(d.principal_current||0))}</td>
      <td class="right">${fmt(Number(d.accrued_interest||0))}</td>
      <td>${String(d.is_active)!=='false'?'‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà':'‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'}</td>
      <td>
        <button class="btn-ghost" data-act="debt-edit" data-id="${escs(d.debt_id)}">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
        <button class="btn-ghost" data-act="close" data-id="${escs(d.debt_id)}">‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</button>
      </td>`;
    tr.dataset.row = JSON.stringify(d);
    tb.appendChild(tr);
  }
}
$('#tblDebt').addEventListener('click', async (e)=>{
  const btnEdit = e.target.closest('button[data-act="debt-edit"]');
  if (btnEdit){
    const d = JSON.parse(btnEdit.closest('tr').dataset.row);
    const body = `
      <div class="row">
        <div class="col"><label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ</label><input id="edName" value="${escs(d.lender_name||'')}"></div>
        <div class="col"><label>‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ)</label><input id="edRate" type="number" step="0.01" value="${Number(d.annual_rate||0)}"></div>
      </div>`;
    openModal('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ', body, async ()=>{
      const lender_name = $('#edName').value.trim();
      const annual_rate = Number($('#edRate').value);
      if (!lender_name || !isFinite(annual_rate)){ toast('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', false); return; }
      const r = await api('debts/update', { debt_id: d.debt_id, lender_name, annual_rate }, true, true);
      if (r.ok){ toast('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß'); loadDebts(); drawDebtChart(); }
      else toast(r.message||'‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false);
    });
    return;
  }
  const btnClose = e.target.closest('button[data-act="close"]');
  if (btnClose){
    const id = btnClose.getAttribute('data-id');
    const r = await api('debts/close', { debt_id:id }, true, true);
    if (r.ok){ toast('‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß'); loadDebts(); drawDebtChart(); } else { toast(r.message||'‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false); }
  }
});
$('#btnDebtAdd').addEventListener('click', ()=> lockBtn($('#btnDebtAdd'), async ()=>{
  const lender_name = $('#debtName').value.trim();
  const annual_rate = Number($('#debtAPR').value);
  const principal_initial = Number($('#debtPrincipal').value||0);
  const start_date = $('#debtStart').value || todayISO();
  if (!lender_name || !(isFinite(annual_rate) && annual_rate>=0)){ toast('‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', false); return; }
  const r = await api('debts/create', { lender_name, annual_rate, principal_initial: isFinite(principal_initial)?Math.max(0,Math.round(principal_initial*100)/100):0, start_date }, true, true);
  if (r.ok){ toast('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); $('#debtName').value=''; $('#debtAPR').value=''; $('#debtPrincipal').value=''; $('#debtStart').value=''; loadDebts(); drawDebtChart(); }
  else toast(r.message||'‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false);
}));

/* ===== ADD TRANSACTION / DEBT OPS ===== */
function populateTypeTargets(){
  const t = $('#txType').value;
  const useDebt = (t==='debt_pay' || t==='debt_borrow');
  $('#colDebt').style.display = useDebt ? '' : 'none';
  $('#colCat').style.display  = useDebt ? 'none' : '';
  if (useDebt) populateDebtSelect(); else populateCatSelect();
}
$('#txType').addEventListener('change', populateTypeTargets);

function normalizeAmount(v){ const n=Number(v); if (!isFinite(n) || n<=0) return NaN; return Math.round(n*100)/100; }
$('#btnSave').addEventListener('click', ()=> lockBtn($('#btnSave'), ()=> saveTx($('#keepSwitch').checked)));
$('#tab-add').addEventListener('keydown', (e)=>{ if (e.key==='Enter'){ e.preventDefault(); saveTx($('#keepSwitch').checked); } });

async function saveTx(keep=false){
  const type = $('#txType').value;
  const date = $('#txDate').value;
  const amt  = normalizeAmount($('#txAmount').value);
  const note = $('#txNote').value.trim();

  if (!date){ $('#txMsg').textContent='‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'; toast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', false); return; }
  if (isNaN(amt)){ $('#txMsg').textContent='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; toast('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', false); return; }

  let r;
  if (type==='debt_pay'){
    const debt_id = $('#txDebt').value;
    if (!debt_id){ toast('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ', false); return; }
    r = await api('debts/repay', { debt_id, date, amount: amt, note }, true, true);
    if (r.ok){
      const ip = fmt(Number(r.interest_paid||0)), pp = fmt(Number(r.principal_paid||0)), ex = Number(r.overpay||0);
      toast(`‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡∏î‡∏≠‡∏Å ${ip} ‚Ä¢ ‡∏ï‡πâ‡∏ô ${pp}` + (ex>0?` ‚Ä¢ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ${fmt(ex)}`:''));
      if (!keep){ $('#txType').value='expense'; $('#txDate').value=todayISO(); populateTypeTargets(); }
      $('#txAmount').value=''; $('#txNote').value='';
      await Promise.all([refreshDash(true), loadDebts()]);
      $('#txAmount').focus();
      return;
    } else {
      toast(r.message||r.error||'‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false);
      return;
    }
  } else if (type==='debt_borrow'){
    const debt_id = $('#txDebt').value;
    if (!debt_id){ toast('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ', false); return; }
    r = await api('debts/borrow', { debt_id, date, amount: amt, note }, true, true);
    if (r.ok){
      toast('‡∏Å‡∏π‡πâ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°');
      if (!keep){ $('#txType').value='expense'; $('#txDate').value=todayISO(); populateTypeTargets(); }
      $('#txAmount').value=''; $('#txNote').value='';
      await Promise.all([refreshDash(true), loadDebts()]);
      $('#txAmount').focus();
      return;
    } else { toast(r.message||r.error||'‡∏Å‡∏π‡πâ‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false); return; }
  } else {
    // ‡∏õ‡∏Å‡∏ï‡∏¥ (income/expense/saving)
    const category_id = $('#txCat').value;
    if (!category_id){ $('#txMsg').textContent='‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î'; toast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î', false); return; }
    r = await api('transactions/create', { date, type, category_id, amount: amt, note }, true, true);
    if (r.ok){
      $('#txMsg').textContent='‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß'; toast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ');
      $('#txAmount').value=''; $('#txNote').value='';
      if (!keep){ $('#txType').value='expense'; $('#txDate').value = todayISO(); populateTypeTargets(); }
      refreshDash(true); $('#txAmount').focus();
    } else {
      const msg = r.message || r.error || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      $('#txMsg').textContent='‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'; toast(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${msg}`, false);
    }
  }
}

/* ===== DASHBOARD ===== */
function ensureRangeDefaults(){
  if (!$('#fFrom').value || !$('#fTo').value){
    const mb=monthBoundsOf(new Date()); $('#fFrom').value=mb.start; $('#fTo').value=mb.end;
  }
  updateRangeUI();
}
function updateRangeUI(){
  const f=$('#fFrom').value, t=$('#fTo').value;
  const today=todayISO(), mb=monthBoundsOf(new Date());
  let txt='‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á'; const isToday=(f===today && t===today); const isMonth=(f===mb.start && t===mb.end);
  if (isToday) txt='‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'; else if (isMonth) txt='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ';
  $('#rangeBadge').textContent=txt;
  $('#btnToday').classList.toggle('active', isToday);
  $('#btnMonth').classList.toggle('active', isMonth);
}
$('#btnToday').addEventListener('click', ()=>{ const d=todayISO(); $('#fFrom').value=d; $('#fTo').value=d; updateRangeUI(); refreshDash(); });
$('#btnMonth').addEventListener('click', ()=>{ const mb=monthBoundsOf(new Date()); $('#fFrom').value=mb.start; $('#fTo').value=mb.end; updateRangeUI(); refreshDash(); });
$('#btnRangeRefresh').addEventListener('click', ()=> refreshDash());
$('#fFrom').addEventListener('change', ()=> updateRangeUI());
$('#fTo').addEventListener('change',   ()=> updateRangeUI());
$('#btnRefresh').addEventListener('click', ()=> refreshDash());

function setKpi(inc, exp, savNet, debtPay){
  const net = inc - exp - debtPay - savNet;
  $('#sumIncome').textContent = fmt(inc);
  $('#sumExpense').textContent = fmt(exp);
  $('#sumDebtPay').textContent = fmt(debtPay);
  $('#sumSaving').textContent  = fmt(savNet);
  $('#sumNet').textContent     = fmt(net);
}

async function refreshDash(silent=false, withOverlay=true){
  if (!token){ if(!silent) toast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô', false); return; }
  const from=$('#fFrom').value, to=$('#fTo').value;

  const tr = await api('transactions/list', { from, to, type:'all' }, true, withOverlay);
  if (!tr.ok){ if(!silent) toast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false); return; }
  const rawItems = Array.isArray(tr.items) ? tr.items : [];
  const items = rawItems.map(x=> ({...x, amount:+x.amount}));
  lastItems = items.slice();

  withdrawIncomeIds = new Set();
  for (const it of items){ if (it.type==='income' && _isWithdrawIncomeName(it.category_name)){ withdrawIncomeIds.add(String(it.category_id)); } }

  const inc      = sum(items, x=> x.type==='income'  ? x.amount : 0);
  const debtPay  = sum(items, x=> x.type==='expense' && debtPayCatIds.has(String(x.category_id)) ? x.amount : 0);
  const exp      = sum(items, x=> x.type==='expense' && !debtPayCatIds.has(String(x.category_id)) ? x.amount : 0);
  const savDep   = sum(items, x=> x.type==='saving'  ? x.amount : 0);
  const savWd    = sum(items, x=> x.type==='income' && withdrawIncomeIds.has(String(x.category_id)) ? x.amount : 0);
  const savNet   = savDep - savWd;

  setKpi(inc, exp, savNet, debtPay);

  const mk = monthKeyFromRange(from, to);
  await loadAndShowBudgetGoal(mk, exp, savNet, withOverlay);

  drawExpByCat(items);
  drawFlow(items);
  drawSavingCum(items);
  renderTable(items);

  await drawDebtChart();
}

function monthKeyFromRange(f, t){
  if (f && t){
    const fd = new Date(f), td=new Date(t);
    if (fd.getFullYear()===td.getFullYear() && fd.getMonth()===td.getMonth()) return yyyyMmOf(fd);
  }
  const now=new Date(); return yyyyMmOf(now);
}

async function loadAndShowBudgetGoal(yyyyMm, expenseTotal, savingNet, withOverlay=true){
  const list = await api('budgets/list', { month: yyyyMm }, true, withOverlay);
  let budget=0, goal=0;
  if (list.ok && Array.isArray(list.items)){
    for (const it of list.items){
      if (String(it.category_id)===BUD_CAT_OVERALL) budget=Number(it.limit_amount||0);
      if (String(it.category_id)===BUD_CAT_SAVE_GOAL) goal=Number(it.limit_amount||0);
    }
  }
  $('#inpBudget').value = budget>0 ? budget : '';
  $('#inpSavingGoal').value = goal>0 ? goal : '';

  const b = Number(budget||0);
  const g = Number(goal||0);

  const pctB = (!b || b<=0) ? 0 : Math.round((expenseTotal/b)*100);
  $('#budgetBar').style.width = (b>0 ? Math.min(pctB,100) : 0) + '%';
  $('#budgetHint').textContent = b>0
    ? (expenseTotal>b ? `‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö ${fmt(expenseTotal-b)} ‡∏ö‡∏≤‡∏ó` : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ö ${fmt(b-expenseTotal)} ‡∏ö‡∏≤‡∏ó`)
    : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö';

  const savingClamped = Math.max(0, savingNet);
  const pctG = (!g || g<=0) ? 0 : Math.round((savingClamped/g)*100);
  $('#savingBar').style.width = (g>0 ? Math.min(pctG,100) : 0) + '%';
  $('#savingHint').textContent = g>0
    ? (savingNet>=g ? `‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß (+${fmt(savingNet-g)})` : `‡∏Ç‡∏≤‡∏î‡∏≠‡∏µ‡∏Å ${fmt(g-savingNet)} ‡∏ö‡∏≤‡∏ó`)
    : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤';

  $('#btnSaveBudget').onclick = ()=> lockBtn($('#btnSaveBudget'), async ()=>{
    const vBudget = Number($('#inpBudget').value||0);
    const vGoal   = Number($('#inpSavingGoal').value||0);
    let ok1=true, ok2=true;
    if (isFinite(vBudget) && vBudget>=0){
      ok1 = (await api('budgets/upsert', { month: yyyyMm, category_id: BUD_CAT_OVERALL,   limit_amount: vBudget }, true, true)).ok;
    }
    if (isFinite(vGoal) && vGoal>=0){
      ok2 = (await api('budgets/upsert', { month: yyyyMm, category_id: BUD_CAT_SAVE_GOAL, limit_amount: vGoal   }, true, true)).ok;
    }
    if (ok1 && ok2) { toast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏ö/‡πÄ‡∏õ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'); refreshDash(true); }
    else toast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏ö/‡πÄ‡∏õ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', false);
  });
}

function drawExpByCat(items){
  const panelNo=$('#noDataExp'); destroyChart(chartExp);
  const exps=items.filter(x=> x.type==='expense' && !debtPayCatIds.has(String(x.category_id)));
  if (!exps.length){ panelNo.classList.remove('hide'); chartExp=null; return; }
  panelNo.classList.add('hide');
  const buckets=groupBy(exps, x=> x.category_name || '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ');
  const labels=Object.keys(buckets);
  const data=labels.map(k=> sum(buckets[k], x=> x.amount));
  chartExp=new Chart(el('#chartExp'),{
    type:'bar',
    data:{ labels, datasets:[{ label:'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ö‡∏≤‡∏ó)', data, backgroundColor:'rgba(233,30,99,0.65)', borderColor:'rgba(233,30,99,1)', borderWidth:1 }] },
    options:{ responsive:true, maintainAspectRatio:false, animation:false, scales:{ y:{ beginAtZero:true }}, plugins:{ legend:{ display:false } } }
  });
}
function drawFlow(items){
  const panelNo=$('#noDataFlow'); destroyChart(chartFlow);
  if (!items.length){ panelNo.classList.remove('hide'); chartFlow=null; return; }
  panelNo.classList.add('hide');

  const g=groupBy(items, x=> x.date);
  const ds=Object.keys(g).sort();

  const income = ds.map(d=> sum(g[d], x=> x.type==='income'? x.amount:0));
  const expenseNoDebt = ds.map(d=> sum(g[d], x=> x.type==='expense' && !debtPayCatIds.has(String(x.category_id)) ? x.amount:0));
  const debtPay = ds.map(d=> sum(g[d], x=> x.type==='expense' &&  debtPayCatIds.has(String(x.category_id)) ? x.amount:0));
  const saving = ds.map(d=> sum(g[d], x=> x.type==='saving'? x.amount:0));

  const netDaily = ds.map((_,i)=> income[i] - expenseNoDebt[i] - debtPay[i] - saving[i]);
  const netCum   = runningSum(netDaily);

  chartFlow=new Chart(el('#chartFlow'),{
    type:'line',
    data:{ labels:ds,
      datasets:[
        { label:'‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', data:income, borderColor:'#00c896', backgroundColor:'rgba(0,200,150,.15)', tension:.35, fill:false },
        { label:'‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', data:expenseNoDebt, borderColor:'#ff4d4f', backgroundColor:'rgba(255,77,79,.15)', tension:.35, fill:false },
        { label:'‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ', data:debtPay, borderColor:'#e91e63', backgroundColor:'rgba(233,30,99,.12)', tension:.35, fill:false },
        { label:'‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏∞‡∏™‡∏°', data:netCum, borderColor:'#6c8cff', backgroundColor:'rgba(108,140,255,.15)', tension:.35, fill:false }
      ]},
    options:{ responsive:true, maintainAspectRatio:false, animation:false, interaction:{ mode:'index', intersect:false }, scales:{ y:{ beginAtZero:true } } }
  });
}
function drawSavingCum(items){
  const panelNo=$('#noDataSav'); destroyChart(chartSavCum);
  const depBy=groupBy(items.filter(x=>x.type==='saving'), x=> x.date);
  const wdrBy=groupBy(items.filter(x=> x.type==='income' && withdrawIncomeIds.has(String(x.category_id))), x=> x.date);
  const dates=Array.from(new Set([...Object.keys(depBy), ...Object.keys(wdrBy)])).sort();
  if (!dates.length){ panelNo.classList.remove('hide'); chartSavCum=null; return; }
  panelNo.classList.add('hide');
  const netPerDay=dates.map(d=> (sum(depBy[d]||[], x=>x.amount) - sum(wdrBy[d]||[], x=>x.amount)));
  const cum=runningSum(netPerDay);
  chartSavCum=new Chart(el('#chartSavCum'),{
    type:'line',
    data:{ labels:dates, datasets:[{ label:'‡∏≠‡∏≠‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏™‡∏∞‡∏™‡∏°', data:cum, borderColor:'#2dd4bf', backgroundColor:'rgba(45,212,191,.15)', tension:.35, fill:false }] },
    options:{ responsive:true, maintainAspectRatio:false, animation:false, scales:{ y:{ beginAtZero:true } } }
  });
}

/* ===== Debt charts: snapshot vs history ===== */
$('#debtViewMode').addEventListener('change', ()=>{ debtChartMode = $('#debtViewMode').value; drawDebtChart(); });
$('#debtFilter').addEventListener('change', ()=> drawDebtChart());

async function drawDebtChart(){
  destroyChart(chartDebt);
  if (debtChartMode === 'snapshot') {
    $('#debtForecast').style.display = 'none';
    return drawDebtChartCurrent();
  }
  return drawDebtHistory();
}

async function drawDebtChartCurrent(){
  const r = await api('debts/summary', {}, true, true);
  if (!r.ok || !Array.isArray(r.items) || r.items.length===0){ $('#noDebt').classList.remove('hide'); return; }
  $('#noDebt').classList.add('hide');

  // ‡πÄ‡∏ï‡∏¥‡∏° dropdown ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏£‡∏∏‡∏õ
  const sel = $('#debtFilter'); const seen = new Set(); sel.innerHTML = `<option value="">‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ: ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>`;
  for (const it of r.items){ if (!seen.has(it.debt_id)){ seen.add(it.debt_id);
    const o=document.createElement('option'); o.value=it.debt_id; o.textContent=escs(it.lender_name||'‚Äî'); sel.appendChild(o); } }

  const labels = r.items.map(x=> escs(x.lender_name || '‚Äî'));
  const totals = r.items.map(x=> Number(x.total_due||0));
  chartDebt = new Chart(el('#chartDebt'), {
    type:'bar',
    data:{ labels, datasets:[{ label:'‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)', data:totals, backgroundColor:'rgba(233,30,99,.55)', borderColor:'rgba(233,30,99,1)', borderWidth:1 }] },
    options:{ responsive:true, maintainAspectRatio:false, animation:false, scales:{ y:{ beginAtZero:true } }, plugins:{ legend:{display:false} } }
  });
}

async function drawDebtHistory(){
  const debt_id = $('#debtFilter').value || null;
  const rTx = await api('debts/tx/list', { debt_id }, true, true);
  if (!rTx.ok){
    $('#noDebt').classList.remove('hide');
    $('#debtForecast').style.display='block';
    $('#debtForecast').textContent='‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï API debts/tx/list ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á interest_paid/principal_paid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥';
    return;
  }
  const items = Array.isArray(rTx.items) ? rTx.items : [];
  if (!items.length){ $('#noDebt').classList.remove('hide'); return; }
  $('#noDebt').classList.add('hide');

  const byDate = groupBy(items, x=> String(x.date).slice(0,10));
  const dates = Object.keys(byDate).sort();
  const interestPaid = dates.map(d=> sum(byDate[d].filter(x=>x.type==='repay'), x=> Number(x.interest_paid||0)));
  const principalPaid= dates.map(d=> sum(byDate[d].filter(x=>x.type==='repay'), x=> Number(x.principal_paid||0)));

  chartDebt = new Chart(el('#chartDebt'), {
    type:'line',
    data:{ labels:dates, datasets:[
      { label:'‡∏à‡πà‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢', data:interestPaid, borderColor:'#ffb020', backgroundColor:'rgba(255,176,32,.12)', tension:.35, fill:false },
      { label:'‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô',   data:principalPaid, borderColor:'#00c896', backgroundColor:'rgba(0,200,150,.12)', tension:.35, fill:false }
    ]},
    options:{ responsive:true, maintainAspectRatio:false, animation:false, interaction:{mode:'index',intersect:false}, scales:{ y:{ beginAtZero:true } } }
  });

  // ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 90 ‡∏ß‡∏±‡∏ô
  const sinceDays = 90;
  const cut = new Date(); cut.setDate(cut.getDate() - sinceDays);
  const recent = [];
  dates.forEach((d,i)=>{ if (new Date(d) >= cut) recent.push(principalPaid[i]); });
  const avgPrincipalPerDay = recent.length ? (recent.reduce((a,b)=>a+b,0) / recent.length) : 0;

  const rSum = await api('debts/summary', {}, true, true);
  let forecastBox = $('#debtForecast'); forecastBox.style.display='block';
  if (!rSum.ok){ forecastBox.textContent='‚Äî'; return; }
  const principalRemain = Number(rSum.totals?.principal || 0);
  if (avgPrincipalPerDay > 0 && principalRemain > 0){
    const days = Math.ceil(principalRemain / avgPrincipalPerDay);
    const eta = new Date(); eta.setDate(eta.getDate()+days);
    forecastBox.textContent = `‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏ô ~ ${days.toLocaleString('th-TH')} ‡∏ß‡∏±‡∏ô (‚âà ${eta.toISOString().slice(0,10)}) ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${fmt(avgPrincipalPerDay)} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ${sinceDays} ‡∏ß‡∏±‡∏ô)`;
  } else {
    forecastBox.textContent = '‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á)';
  }
}

/* ===== LIST (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) ===== */
function safeKey(x){ return `${(x.date||'').slice(0,10)}T${(x.time||'00:00:00').slice(0,8)}`; }
function renderTable(items){
  const tb = $('#tblBody'); tb.innerHTML='';
  const sorted = items.slice().sort((a,b)=> safeKey(b).localeCompare(safeKey(a)));
  if (!sorted.length){ $('#emptyList').style.display='block'; return; }
  $('#emptyList').style.display='none';
  for (const x of sorted){
    const isWithdrawIncome = (x.type==='income' && withdrawIncomeIds.has(String(x.category_id)));
    const isDebtPay = (x.type==='expense' && debtPayCatIds.has(String(x.category_id)));
    const typeTxt = x.type==='income'?(isWithdrawIncome?'‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö (‡∏ñ‡∏≠‡∏ô‡∏≠‡∏≠‡∏°)':'‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'):(x.type==='saving'?'‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô':(isDebtPay?'‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ':'‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'));
    const badge = x.type==='income'
      ? (isWithdrawIncome
          ? 'background:rgba(45,212,191,.16);color:#a7fff0;border:1px solid rgba(45,212,191,.35);'
          : 'background:rgba(0,200,150,.18);color:#9ff3df;border:1px solid rgba(0,200,150,.35);')
      : (x.type==='saving'
          ? 'background:rgba(45,212,191,.16);color:#a7fff0;border:1px solid rgba(45,212,191,.35);'
          : (isDebtPay
              ? 'background:rgba(233,30,99,.18);color:#ffd1df;border:1px solid rgba(233,30,99,.35);'
              : 'background:rgba(233,30,99,.15);color:#ffb6cc;border:1px solid rgba(233,30,99,.35);'));
    const tr = document.createElement('tr');
    const disEdit = (x.category_name==='‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏µ‡πâ' || x.category_name==='‡∏Å‡∏π‡πâ‡∏´‡∏ô‡∏µ‡πâ');
    tr.innerHTML = `
      <td title="${escs((x.date||'').slice(0,10))}">${escs((x.date||'').slice(0,10))}</td>
      <td><span style="padding:.25rem .5rem;border-radius:999px;font-size:.85rem;${badge}">${typeTxt}</span></td>
      <td>${escs(x.category_name || x.category_id)}</td>
      <td class="right">${fmt(x.amount)}</td>
      <td>${escs(x.note)}</td>
      <td><button class="btn-ghost" data-act="tx-edit" data-id="${escs(x.tx_id)}" ${disEdit?'disabled title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏´‡∏ô‡∏µ‡πâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"':''}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button></td>`;
    tr.dataset.row = JSON.stringify(x);
    tb.appendChild(tr);
  }
}
function openModal(title, bodyHtml, onSave){
  $('#modalTitle').textContent = title;
  $('#modalBody').innerHTML = bodyHtml;
  $('#modal').classList.remove('hide');
  document.body.style.overflow='hidden';
  const onEsc = (e)=>{ if(e.key==='Escape'){ cleanup(); } };
  document.addEventListener('keydown', onEsc);

  const cleanup = ()=>{
    $('#btnModalSave').onclick=null; $('#btnModalCancel').onclick=null;
    document.removeEventListener('keydown', onEsc);
    document.body.style.overflow='';
    $('#modal').classList.add('hide');
  };
  $('#btnModalCancel').onclick = cleanup;
  $('#btnModalSave').onclick = ()=> lockBtn($('#btnModalSave'), async ()=>{ await onSave(); cleanup(); });
}

/* ===== INIT ===== */
function init(){
  $('#txDate').value = todayISO();
  ensureLoginUI();
  populateTypeTargets();
}
init();
</script>
</body>
</html>
